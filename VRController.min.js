function OrientationArmModel(){this.isLeftHanded=!1,this.controllerQ=new THREE.Quaternion,this.lastControllerQ=new THREE.Quaternion,this.headQ=new THREE.Quaternion,this.headPos=new THREE.Vector3,this.elbowPos=new THREE.Vector3,this.wristPos=new THREE.Vector3,this.time=null,this.lastTime=null,this.rootQ=new THREE.Quaternion,this.pose={orientation:new THREE.Quaternion,position:new THREE.Vector3}}THREE.VRController=function(t){var e,n,o,i="",r=[],a=[];THREE.Object3D.call(this),this.matrixAutoUpdate=!1,this.standingMatrix=new THREE.Matrix4,this.head={position:new THREE.Vector3,quaternion:new THREE.Quaternion};const s=[];s.name="",s.intensity=0,this.vibeChannels=[s],this.vibeChannels.intensity=0,this.vibeChannels.prior=0,this.configureGampad=function(t){this.gamepad=t,this.name=t.id,this.dof=t.pose?3*(+t.pose.hasOrientation+ +t.pose.hasPosition):0,i=t.hand},this.updateGamepad=function(t){this.configureGampad(t),r.length=0,a.length=0,r.byName={},t.axes.forEach(function(t,e){r[e]=t}),a.byName={},t.buttons.forEach(function(t,e){a[e]={name:"button_"+e,value:t.value,isTouched:t.touched,isPressed:t.pressed,isPrimary:!1}}),void 0!==this.supported.axes&&this.supported.axes.forEach(function(t){r.byName[t.name]=t.indexes}),void 0!==this.supported.buttons&&this.supported.buttons.forEach(function(t,e){a[e].name=t}),o=n.primary,a.forEach(function(t){a.byName[t.name]=t}),void 0===o&&(o=t.buttons.length>1?"button_1":"button_0"),a.byName[o].isPrimary=!0},this.initGamepad=function(t){e=Object.keys(THREE.VRController.supported).find(function(e){if(t.id.startsWith(e))return!0}),void 0!==(n=THREE.VRController.supported[e])&&(this.supported=n,this.style=n.style,this.updateGamepad(t))},this.initGamepad(t),this.getHandedness=function(){return i},this.getAxis=function(t){return r[t]},this.getAxes=function(t){var e=[];return void 0===t?r:"string"==typeof t?(r.byName[t].forEach(function(t){e.push(r[t])}),e):"number"==typeof t?r[t]:void 0},this.getButton=function(t){return"string"==typeof t?("primary"===t&&(t=o),a.byName[t]):"number"==typeof t?a[t]:void 0},this.inspect=function(){return"#"+t.index+": "+t.id+"\n\tStyle: "+this.style+"\n\tDOF: "+this.dof+"\n\tHandedness: "+i+"\n\n\tAxes: "+r.reduce(function(t,e,n){return t+e+(n<r.length-1?", ":"")},"")+'\n\n\tButton primary: "'+o+'"\n\tButtons:'+a.reduce(function(t,e){return t+'\n\t\tName: "'+e.name+'"\n\t\t\tValue:     '+e.value+"\n\t\t\tisTouched: "+e.isTouched+"\n\t\t\tisPressed: "+e.isPressed+"\n\t\t\tisPrimary: "+e.isPrimary},"")+"\n\n\tVibration intensity: "+this.vibeChannels.intensity+"\n\tVibration channels:"+this.vibeChannels.reduce(function(t,e){return t+'\n\t\tName: "'+e.name+'"\n\t\t\tCurrent intensity: '+e.intensity+e.reduce(function(t,e){return t+"\n\t\t\tat time "+e[0]+" intensity = "+e[1]},"")},"")},this.pollForChanges=function(){var e=THREE.VRController.verbosity,n=this,o="> #"+n.gamepad.index+" "+n.gamepad.id+" (Handedness: "+i+") ",s=Object.keys(r.byName),l=!1;i!==n.gamepad.hand&&(e>=.4&&console.log(o+'hand changed from "'+i+'" to "'+n.gamepad.hand+'"'),i=n.gamepad.hand,n.dispatchEvent({type:"hand changed",hand:i})),s.length>0?s.forEach(function(i){var a=[];l=!1,r.byName[i].forEach(function(e){t.axes[e]!==r[e]&&(l=!0,r[e]=n.gamepad.axes[e]),a.push(r[e])}),l&&("vive"===n.style&&"thumbpad"===i&&(a[1]*=-1),e>=.7&&console.log(o+i+" axes changed",a),n.dispatchEvent({type:i+" axes changed",axes:a}))}):(n.gamepad.axes.forEach(function(t,e){t!==r[e]&&(l=!0,r[e]=t)}),l&&(e>=.7&&console.log(o+"axes changed",r),n.dispatchEvent({type:"axes changed",axes:r}))),a.forEach(function(t,i){var r,a=o+t.name+" ",s=t.isPrimary;t.value!==n.gamepad.buttons[i].value&&(t.value=n.gamepad.buttons[i].value,e>=.6&&console.log(a+"value changed",t.value),n.dispatchEvent({type:t.name+" value changed",value:t.value}),s&&n.dispatchEvent({type:"primary value changed",value:t.value})),t.isTouched!==n.gamepad.buttons[i].touched&&(t.isTouched=n.gamepad.buttons[i].touched,r=t.isTouched?"began":"ended",e>=.5&&console.log(a+"touch "+r),n.dispatchEvent({type:t.name+" touch "+r}),s&&n.dispatchEvent({type:"primary touch "+r})),t.isPressed!==n.gamepad.buttons[i].pressed&&(t.isPressed=n.gamepad.buttons[i].pressed,r=t.isPressed?"began":"ended",e>=.5&&console.log(a+"press "+r),n.dispatchEvent({type:t.name+" press "+r}),s&&n.dispatchEvent({type:"primary press "+r}))})}},THREE.VRController.prototype=Object.create(THREE.Object3D.prototype),THREE.VRController.prototype.constructor=THREE.VRController,THREE.VRController.prototype.update=function(){var t=this.gamepad,e=t.pose;null!==e.orientation&&this.quaternion.fromArray(e.orientation),null!==e.position?(this.position.fromArray(e.position),this.matrix.compose(this.position,this.quaternion,this.scale),this.matrix.multiplyMatrices(this.standingMatrix,this.matrix),this.matrixWorldNeedsUpdate=!0):(void 0===this.armModel&&(THREE.VRController.verbosity>=.5&&console.log("> #"+t.index+" "+t.id+" (Handedness: "+this.getHandedness()+") adding OrientationArmModel"),this.armModel=new OrientationArmModel),this.armModel.setHeadPosition(this.head.position),this.armModel.setHeadOrientation(this.head.quaternion),this.armModel.setControllerOrientation((new THREE.Quaternion).fromArray(e.orientation)),this.armModel.update(),this.matrix.compose(this.armModel.getPose().position,this.armModel.getPose().orientation,this.scale)),this.matrixWorldNeedsUpdate=!0,this.pollForChanges(),this.applyVibes(),"function"==typeof this.updateCallback&&this.updateCallback()},THREE.VRController.VIBE_TIME_MAX=5e3,THREE.VRController.prototype.setVibe=function(t,e){if("number"==typeof t&&void 0===e&&(e=t,t=""),"string"==typeof t){const n=this,o={};let i=n.vibeChannels.find(function(e){return e.name===t});void 0===i?((i=[]).name=t,i.intensity=0,n.vibeChannels.push(i)):i.splice(0),"number"==typeof e?i.intensity=e:e="number"==typeof i.intensity?i.intensity:0;let r=window.performance.now();return o.set=function(t){return i.push([r,t]),o},o.wait=function(t){return r+=t,o},o}},THREE.VRController.prototype.renderVibes=function(){const t=window.performance.now();this.vibeChannels.forEach(function(e){for(;e.length&&t>e[0][0];)e.intensity=e[0][1],e.shift();"number"!=typeof e.intensity&&(e.intensity=0)});const e=Math.min(1,Math.max(0,this.vibeChannels.reduce(function(t,e){return t+ +e.intensity},0)));return this.vibeChannels.intensity=e,e},THREE.VRController.prototype.applyVibes=function(){if(this.gamepad.hapticActuators&&this.gamepad.hapticActuators[0]){const t=this.renderVibes(),e=window.performance.now();(t!==this.vibeChannels.prior||e-this.vibeChannels.lastCommanded>THREE.VRController.VIBE_TIME_MAX/2)&&(this.vibeChannels.lastCommanded=e,this.gamepad.hapticActuators[0].pulse(t,THREE.VRController.VIBE_TIME_MAX),this.vibeChannels.prior=t)}},THREE.VRController.verbosity=0,THREE.VRController.controllers=[],THREE.VRController.onGamepadConnect=function(t){var e=THREE.VRController,n=new e(t);n.gamepad.hapticActuators;e.controllers[t.index]=n,e.verbosity>=.5&&console.log("vr controller connected",n),e.verbosity>=.7&&console.log(n.inspect()),window.setTimeout(function(){window.dispatchEvent(new CustomEvent("vr controller connected",{detail:n}))},500)},THREE.VRController.onGamepadDisconnect=function(t){var e=THREE.VRController,n=e.controllers[t.index];e.verbosity>=.5&&console.log("vr controller disconnected",n),n.dispatchEvent({type:"disconnected",controller:n}),e.controllers[t.index]=void 0},THREE.VRController.onGamepadDisconnectAll=function(){var t=THREE.VRController;for(i=0;i<t.controllers.length;i++)THREE.VRController.onGamepadDisconnect(t.controllers[i].gamepad)},THREE.VRController.update=function(){var t,e,n;if(void 0!==navigator.getGamepads)for(t=navigator.getGamepads(),n=0;n<t.length;n++)null!=(e=t[n])&&void 0!==e.pose&&null!==e.pose&&(null!==e.pose.orientation||null!==e.pose.position?(void 0===this.controllers[n]?THREE.VRController.onGamepadConnect(e):this.controllers[n].gamepad.timestamp!==e.timestamp&&this.controllers[n].updateGamepad(e),this.controllers[n].update()):void 0!==this.controllers[n]&&THREE.VRController.onGamepadDisconnect(e))},THREE.VRController.inspect=function(){THREE.VRController.controllers.forEach(function(t){console.log("\n"+t.inspect())})},THREE.VRController.supported={"Daydream Controller":{style:"daydream",axes:[{name:"thumbpad",indexes:[0,1]}],buttons:["thumbpad"],primary:"thumbpad"},"Gear VR Controller":{style:"gearvr",axes:[{name:"thumbpad",indexes:[0,1]}],buttons:["thumbpad"],primary:"thumbpad"},"OpenVR Gamepad":{style:"vive",axes:[{name:"thumbpad",indexes:[0,1]}],buttons:["thumbpad","trigger","grip","menu"],primary:"trigger"},"Oculus Touch (Right)":{style:"oculus",axes:[{name:"thumbstick",indexes:[0,1]}],buttons:["thumbstick","trigger","grip","A","B","thumbrest"],primary:"trigger"},"Oculus Touch (Left)":{style:"oculus",axes:[{name:"thumbstick",indexes:[0,1]}],buttons:["thumbstick","trigger","grip","X","Y","thumbrest"],primary:"trigger"},"Spatial Controller (Spatial Interaction Source)":{style:"microsoft",axes:[{name:"thumbstick",indexes:[0,1]},{name:"thumbpad",indexes:[2,3]}],buttons:["thumbstick","trigger","grip","menu","thumbpad"],primary:"trigger"}},Object.assign(OrientationArmModel,{HEAD_ELBOW_OFFSET:new THREE.Vector3(.155,-.465,-.15),ELBOW_WRIST_OFFSET:new THREE.Vector3(0,0,-.25),WRIST_CONTROLLER_OFFSET:new THREE.Vector3(0,0,.05),ARM_EXTENSION_OFFSET:new THREE.Vector3(-.08,.14,.08),ELBOW_BEND_RATIO:.4,EXTENSION_RATIO_WEIGHT:.4,MIN_ANGULAR_SPEED:.61}),OrientationArmModel.prototype.setControllerOrientation=function(t){this.lastControllerQ.copy(this.controllerQ),this.controllerQ.copy(t)},OrientationArmModel.prototype.setHeadOrientation=function(t){this.headQ.copy(t)},OrientationArmModel.prototype.setHeadPosition=function(t){this.headPos.copy(t)},OrientationArmModel.prototype.setLeftHanded=function(t){this.isLeftHanded=t},OrientationArmModel.prototype.update=function(){this.time=performance.now();var t=this.getHeadYawOrientation_(),e=(this.time-this.lastTime)/1e3,n=this.quatAngle_(this.lastControllerQ,this.controllerQ);n/e>OrientationArmModel.MIN_ANGULAR_SPEED?this.rootQ.slerp(t,n/10):this.rootQ.copy(t);var o=(new THREE.Euler).setFromQuaternion(this.controllerQ,"YXZ"),i=THREE.Math.radToDeg(o.x),r=this.clamp_((i-11)/39,0,1),a=this.rootQ.clone().inverse();a.multiply(this.controllerQ);var s=this.elbowPos;s.copy(this.headPos).add(OrientationArmModel.HEAD_ELBOW_OFFSET);var l=(new THREE.Vector3).copy(OrientationArmModel.ARM_EXTENSION_OFFSET);l.multiplyScalar(r),s.add(l);var d=this.quatAngle_(a,new THREE.Quaternion),p=THREE.Math.radToDeg(d),h=(1-Math.pow(p/180,4))*(OrientationArmModel.ELBOW_BEND_RATIO+(1-OrientationArmModel.ELBOW_BEND_RATIO)*r*OrientationArmModel.EXTENSION_RATIO_WEIGHT),c=(new THREE.Quaternion).slerp(a,h),u=c.inverse(),m=a.clone().multiply(u),E=this.wristPos;E.copy(OrientationArmModel.WRIST_CONTROLLER_OFFSET),E.applyQuaternion(c),E.add(OrientationArmModel.ELBOW_WRIST_OFFSET),E.applyQuaternion(m),E.add(this.elbowPos);var y=(new THREE.Vector3).copy(OrientationArmModel.ARM_EXTENSION_OFFSET);y.multiplyScalar(r);var R=(new THREE.Vector3).copy(this.wristPos);R.add(y),R.applyQuaternion(this.rootQ);var g=(new THREE.Quaternion).copy(this.controllerQ);this.pose.orientation.copy(g),this.pose.position.copy(R),this.lastTime=this.time},OrientationArmModel.prototype.getPose=function(){return this.pose},OrientationArmModel.prototype.getForearmLength=function(){return OrientationArmModel.ELBOW_WRIST_OFFSET.length()},OrientationArmModel.prototype.getElbowPosition=function(){return this.elbowPos.clone().applyQuaternion(this.rootQ)},OrientationArmModel.prototype.getWristPosition=function(){return this.wristPos.clone().applyQuaternion(this.rootQ)},OrientationArmModel.prototype.getHeadYawOrientation_=function(){var t=(new THREE.Euler).setFromQuaternion(this.headQ,"YXZ");return t.x=0,t.z=0,(new THREE.Quaternion).setFromEuler(t)},OrientationArmModel.prototype.clamp_=function(t,e,n){return Math.min(Math.max(t,e),n)},OrientationArmModel.prototype.quatAngle_=function(t,e){var n=new THREE.Vector3(0,0,-1),o=new THREE.Vector3(0,0,-1);return n.applyQuaternion(t),o.applyQuaternion(e),n.angleTo(o)};